package homework;

import javax.swing.ImageIcon;
import javax.swing.table.AbstractTableModel;



/**
 * A játékosok bábuinak adatait tartalmazza táblázat betöltéséhez.
 * */
public class PawnData extends AbstractTableModel{
	private static final long serialVersionUID = 1L;
	
	
	
	//----------ADATTAGOK----------
	Pawn[] player1;
	Pawn[] player2;
	static final int max_pawns = 5;
	static final ImageIcon p1_icon = new ImageIcon("elephant.jpg");
	static final ImageIcon p2_icon = new ImageIcon("rhino.jpg");
	
	
	
	//---------METÓDUSOK----------
	
	
	/**
	 * Az osztály konstruktora. Feltölti a mezõket.
	 * Beállítja a mezõk szomszédjait.
	 * */
	public PawnData() {
		player1 = new Pawn[max_pawns];
		player2 = new Pawn[max_pawns];
		for(int i = 0; i<max_pawns; ++i) {
			player1[i] = new Pawn(p1_icon);
			player2[i] = new Pawn(p2_icon);
		}
	}
	
	
	public String getColumnName(int col) {
		switch(col) {
		case 0: return "Player1";
		case 1: return "Player2";
		default: return "Player3";
		}
	}
	
	
	@Override
	public int getRowCount() {
		return max_pawns;
	}

	
	@Override
	public int getColumnCount() {
		return 2;
	}
	
	
	public Class<? extends Object> getColumnClass(int column)
    {
        return getValueAt(0, column).getClass();
    }
	
	
	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		Field field = fields[rowIndex][columnIndex];
		return field;
	}
	
	
	public void setValueAt(Object value, int row, int col) {
		Pawn p = (Pawn)value;
		Field f = fields[row][col];
		f.AddThing(p);
		p.SetField(f);
		p.SetField(f);
		fireTableCellUpdated(row, col);
	}

}
