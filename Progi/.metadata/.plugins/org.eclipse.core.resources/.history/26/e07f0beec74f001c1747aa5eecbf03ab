package homework;

import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 * Játék fõmenüje
 * */
public class MenuFrame extends JFrame{
	
	//----------ADATTAGOK----------
	private static final long serialVersionUID = 1L;
	final static boolean shouldFill = true;
	final static boolean shouldWeightX = true;
	private GameFrame game;
	
	private JButton bt_new_game;
	private JButton bt_exit;
	private JButton bt_rules;
	private JButton bt_cont_game;
	
	private static MenuFrame mf;
	
	
	
	//---------JÁTÉK-MEGJELENÍTÕ-METÓDUSOK----------
	
	
	/**
	 * A program belépési pontja.
	 * */
	public static void main(String[] args) {
		mf = new MenuFrame();
		mf.setVisible(true);
	}
	
	
	/**
	 * Osztály konstruktora
	 * */
	public MenuFrame() {
		
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		initComp();
		
		//Ablak beállításai
		setMinimumSize(new Dimension(500, 500));
		setResizable(false);
		setTitle("Main menu");
		
		//Ablak középre állítása
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		this.setLocation(dim.width/2-this.getSize().width/2, 0);
		
		this.pack();
		
		//Ellenõrizzük, hogy van folytatható játék-e
		boolean van_folytathato = !(checkEmptyFile("player1.txt"));
		if(van_folytathato) {
			bt_cont_game.setEnabled(true);
			bt_cont_game.setVisible(true);
		}else {
			bt_cont_game.setEnabled(false);
			bt_cont_game.setVisible(false);
		}
	}
	
	
	/**
	 * Betölti az ablak elemeit*/
	private void initComp() {
		
		// GRIDLAYOUT
		this.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		if(shouldFill)
			c.fill = GridBagConstraints.HORIZONTAL;
		if(shouldWeightX)
			c.weightx = 5.0;
		c.weighty = 1.0;
		setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
		
		// Üdvözlõ szöveg
		String hello_text = "Kedves játékos(ok),"
				+ "üdvözöllek benneteket a Siam játékban!\n";
		JLabel lb = new JLabel(hello_text);
		lb.setHorizontalTextPosition(SwingConstants.CENTER);
		lb.setVerticalTextPosition(SwingConstants.CENTER );
		c.gridx = 0;
		c.gridy = 0;
		c.gridheight = 1;
		c.gridwidth = 4;
		c.ipadx = 40;
		c.insets = new Insets(50,10,20,10);
		this.add(lb, c);
		
		// Új játék gomb
		bt_new_game = new JButton("Új játék");
		bt_new_game.addActionListener(new NewGameActionListener());
		c.gridx = 1;
		c.gridy = 1;
		c.gridwidth = 2;
		c.ipadx = 1;
		c.insets = new Insets(10,200,0,200);
		this.add(bt_new_game, c);
		
		// Kilépés gomb
		bt_exit = new JButton("Kilépés");
		bt_exit.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
				
			}});
		c.gridx = 1;
		c.gridy = 2;
		c.gridwidth = 2;
		c.ipadx = 1;
		c.insets = new Insets(10,200,0,200);
		this.add(bt_exit, c);
		
		// Játékszabályzat gomb
		bt_rules = new JButton("Játékszabályok");
		bt_rules.addActionListener(new ActionListener() {
			String szabalyok = "A játék kezdetekor a pálya közepén sorakozik a három hegy; az állatok mind a tábla\r\n"
					+ "mellett várakoznak. Egy lépésben két dolgot lehet csinálni: mozogni (egy\r\n"
					+ "vízszintesen/függõlegesen szomszédos mezõre) vagy nyomni abba az irányba, amerre az adott\r\n"
					+ "állat néz. A mozgás végén az állatok tetszõlegesen forgathatóak, és a mozgás állhat csak\r\n"
					+ "forgatásból is.\r\n"
					+ "A lökés szabálya lényegében annyi, hogy össze kell adni a lökés irányába nézõ állatokat,\r\n"
					+ "és le kell vonni ebbõl az ellentétes irányba nézõk számát. Ha az eredmény pozitív, akkor\r\n"
					+ "minden(ki) eggyel arrébb megy. Az gyõz, akinek sikerül egy hegyet lelöknie a tábláról, viszont\r\n"
					+ "a lelökõnek az számít, aki a lelökött hegyet legközelebbrõl nyomta (tehát a lökés pillanatában\r\n"
					+ "legközelebb volt és a lökés irányába nézett).";
			@Override
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(new JFrame(), szabalyok, "Játékszabályzat", JOptionPane.INFORMATION_MESSAGE);
				//JOptionPane.showConfirmDialog(new JFrame(), szabalyok, "Játékszabályzat", JOptionPane.NO_OPTION);
			}
		});
		c.gridx = 1;
		c.gridy = 3;
		c.gridwidth = 2;
		c.ipadx = 1;
		c.insets = new Insets(10,200,0,200);
		this.add(bt_rules, c);
		
		// Játék folytatás gomb
		bt_cont_game = new JButton("Játék folytatása");
		bt_cont_game.addActionListener(new ContGameActionListener());
		c.gridx = 1;
		c.gridy = 4;
		c.gridwidth = 2;
		c.ipadx = 1;
		c.insets = new Insets(10,200,10,200);
		this.add(bt_cont_game, c);
	}
	
	/**
	 * Figyeli az új játék gombot.
	 * Hatására egy új játékot indít a felhasználó.
	 * */
	private class NewGameActionListener implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			game = new GameFrame();
			game.setVisible(true);
			mf.setVisible(false);
		}
	}
	
	
	/**
	 * Figyeli a Játék folytatása gombot.
	 * */
	private class ContGameActionListener implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			game = new GameFrame();
			game.contGame();
			game.setVisible(true);
			mf.setVisible(false);
		}
	}
	
	
	/**
	 * Ellenõrzi, hogy a megadott fájl tartalma üres-e
	 * */
	private boolean checkEmptyFile(String f) {
		File wd = new File(System.getProperty("user.dir"));
		File file = new File(wd, f);
		if(file.length() == 0) {
			return true;
		}
		return false;
	}
	
}
